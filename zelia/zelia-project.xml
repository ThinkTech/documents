<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="1f6284a4-9672-4e34-a46d-db901cadaa7b" activeEnvironment="Default" name="Zelia" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:description>Zelia Project</con:description><con:settings><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormBase Path"/><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormTarget Folder">C:\Users\Administrateur\Desktop</con:setting><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormFormat">yaml</con:setting><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormAPI Version">1.0</con:setting><con:setting id="com.smartbear.swagger.ExportSwaggerAction$FormSwagger Version">2.0</con:setting></con:settings><con:interface xsi:type="con:RestService" id="1fd6e3dc-f0e9-4ac7-b5d1-440ba3df5785" wadlVersion="http://wadl.dev.java.net/2009/02" name="WS" type="rest" basePath="" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:description>Zelia web services</con:description><con:settings><con:setting id="CreateWadlDocumentationAction@report-directory">C:\Users\Administrateur\Desktop</con:setting></con:settings><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="login" path="/login" id="34b05074-660e-493a-bbd6-f3497c896422"><con:description>this service allows users to  authentificate in the application and retrieve account data</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>password</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:type xmlns:xs="http://www.w3.org/2001/XMLSchema">xs:string</con:type><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>serialNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="login" id="554815c9-7fa9-4556-baa1-386c241ce7e5" method="POST"><con:description/><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="loginRequest" id="cd09cdfe-6b08-4552-96a2-5a5b8044c141" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:description/><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/login</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="password" value="passer"/>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="serialNumber" value="4555612121212"/>
  <con:entry key="institutionId" value="4566659"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="19061510241205"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="logine" value="ddd"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="appTypez" value="C"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>login</con:entry><con:entry>password</con:entry><con:entry>serialNumber</con:entry><con:entry>customerPreferedLanguage</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getCards" path="/getCards" id="fbb2c2d5-0d48-4d71-be3e-67bbbcc3af0d"><con:description>this service allows users to get a list of cards</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getCards" id="792e8468-af20-455a-b01d-a7b8acb85661" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="getCardsRequest" id="3012ce81-5fa2-46ba-9d5e-ae929920cc8d" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getCards</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="0649809245"/>
  <con:entry key="institutionId" value="45656"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4555555666"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="sessionId" value="12345"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getCardTrans" path="/getCardTrans" id="3bb4f6fa-339d-4b15-aad5-b97f4b183fd0"><con:description>this service allows users to get card transactions</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>cardCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getCardTrans" id="398b9b04-143d-4c02-b263-845e541749f7" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="getCardTransRequest" id="4c50f236-3fca-4e36-9c07-cc12ed099651" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getCardTrans</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="8456665"/>
  <con:entry key="institutionId" value="45555"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4545454445"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="cardCode" value="455444"/>
  <con:entry key="sessionId" value="4454554"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>cardCode</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="updateCard" path="/updateCard" id="54416b52-4a11-4dbe-bf7d-53982c884dd7"><con:description>this service allows users to update a card status</con:description><con:settings/><con:parameters><con:parameter><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>operation</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>cardCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>motifCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>motifIden</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>motifLabel</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>pin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="updateCard" id="c572dcdc-b28a-4c2b-b9b3-e0327e9865fa" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="updateCardRequest" id="87f981c6-33c2-4584-9628-0b44a7564605" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/updateCard</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="institutionId" value="545454"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="cardCode" value="45545445"/>
  <con:entry key="sessionId" value="12345"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="phoneNumber" value="8546656566"/>
  <con:entry key="pin" value="454545454"/>
  <con:entry key="requesTime" value="45445454545"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="motifIden" value="45445445"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="motifLabel" value="p45566899"/>
  <con:entry key="operation" value="1"/>
  <con:entry key="motifCode" value="454445"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>sessionId</con:entry><con:entry>operation</con:entry><con:entry>login</con:entry><con:entry>cardCode</con:entry><con:entry>motifCode</con:entry><con:entry>motifIden</con:entry><con:entry>motifLabel</con:entry><con:entry>pin</con:entry><con:entry>phoneNumber</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getLocation" path="/getLocation" id="4049964c-3d54-42d6-8653-bb8b2fdb02bf"><con:description>this service allows users to get a list of branch, atm and agents from a geographic coordinates</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>lat</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>lon</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getLocation" id="0a6fd234-edb4-4807-b74e-6ab04f80fa34" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="getLocationRequest" id="b84178ac-b7e5-4ebb-a2b8-e879ce8909af" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getLocation</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="85555565"/>
  <con:entry key="institutionId" value="45455454"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4545555"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="lon" value="5556656565"/>
  <con:entry key="sessionId" value="12345"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="lat" value="45556565"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>lat</con:entry><con:entry>lon</con:entry><con:entry>sessionId</con:entry><con:entry>login</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getLoyaltyPoint" path="/getLoyaltyPoint" id="55bd0c90-f6eb-4306-8ef7-3b0adc6e9d3a"><con:description>this service allows users to get their loyalty point</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>cardCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getLoyaltyPoint" id="08ebf71e-58e5-44db-9a98-00c627d82459" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="getLoyaltyPointRequest" id="94ba4065-62b6-4db7-8223-3bb2f13ed6ab" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getLoyaltyPoint</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="1222255"/>
  <con:entry key="institutionId" value="12212"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4545545487"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="cardCode" value="455454"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>cardCode</con:entry><con:entry>login</con:entry><con:entry>phoneNumber</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="topUpCard" path="/topUpCard" id="3f3df50f-d47a-40c3-9eab-216a439dddd3"><con:description>this service allows users to top up a card</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>cardCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>qrCodeData</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="topUpCard" id="c6734e3a-aa7d-4870-aa81-99f8ce594c6f" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="toUpCardRequest" id="42cf9605-fb91-414c-92de-c18d5241a588" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/topUpCard</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="qrCodeData" value="5445454"/>
  <con:entry key="phoneNumber" value="555555"/>
  <con:entry key="institutionId" value="45545454"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="454545445"/>
  <con:entry key="appType" value="1"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="cardCode" value="455454"/>
  <con:entry key="sessionId" value="4445456"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>cardCode</con:entry><con:entry>login</con:entry><con:entry>qrCodeData</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="getMySecretQuestion" path="/getMySecretQuestion" id="6b67699e-00d4-45ea-883e-eb653aaa9192"><con:description>this service allows users to  get questions list to register</con:description><con:settings/><con:parameters><con:parameter><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="getMySecretQuestion" id="cc72e2a6-3f6b-4d15-8365-35b41b952417" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="getMySecretQuestion" id="df7e23c9-5301-4ad0-be88-8f846a658568" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getMySecretQuestion</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="56556565656"/>
  <con:entry key="institutionId" value="44545445"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="444454545454"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
</con:parameters><con:parameterOrder><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>appPlateform</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="forgotUserName" path="/forgotUserName" id="c98153b6-dbeb-4f85-ba83-8a570bdfc444"><con:description>this service allows users to regenerate a  username</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>pin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>secretQuestionCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>secretQuestionAnswer</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="forgotUserName" id="61e5d919-6ba7-4510-8966-f2efdc8daea4" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="forgotUserNameRequest" id="e688303f-6d66-4602-a427-41f38555c7bb" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/forgotUserName</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="8566446"/>
  <con:entry key="institutionId" value="115566"/>
  <con:entry key="pin" value="4445545445"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="454554544"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="secretQuestionAnswer" value="answer"/>
  <con:entry key="sessionId" value="1111455555"/>
  <con:entry key="secretQuestionCode" value="question"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>pin</con:entry><con:entry>secretQuestionCode</con:entry><con:entry>secretQuestionAnswer</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>appVersion</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="updateCustomerAgent" path="/updateCustomerAgent" id="d42108f4-ffff-4bbb-8c70-600ef7f38488"><con:description>this service allows users to update customer and agent informations</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerAgentId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>mail</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>address1</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>city</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>address2</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>photoUrl</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>pin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="updateCustomerAgent" id="067b2461-66d5-47bb-b9cf-0fc6d658df48" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="updateCustomerAgentRequest" id="18097e62-f126-4ca8-a504-d2850f9e1f46" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/updateCustomerAgent</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="customerAgentId" value="1111221"/>
  <con:entry key="institutionId" value="456555665"/>
  <con:entry key="customerPreferedLanguage" value="2"/>
  <con:entry key="mail" value="hicham@s2m.ma"/>
  <con:entry key="city" value="city"/>
  <con:entry key="address2" value="address1"/>
  <con:entry key="address1" value="address1"/>
  <con:entry key="sessionId" value="444554544545*"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="photoUrl" value="45454454454445"/>
  <con:entry key="phoneNumber" value="8898454554"/>
  <con:entry key="pin" value="4445545445454"/>
  <con:entry key="requesTime" value="4445545454"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
</con:parameters><con:parameterOrder><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>customerAgentId</con:entry><con:entry>mail</con:entry><con:entry>address1</con:entry><con:entry>city</con:entry><con:entry>address2</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry><con:entry>photoUrl</con:entry><con:entry>pin</con:entry><con:entry>appPlateform</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="changePassword" path="/changePassword" id="7adac40a-3510-4bed-aabe-842c4c273979"><con:description>this service allows users to change the password</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>oldPassword</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>newPassword</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerAgentId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="changePassword" id="9a5fd4bc-6ca3-4e60-931f-8c6c53b71868" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="changePasswordRequest" id="e5b6e093-6ff1-44aa-a1b7-c9ac0062ce90" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/changePassword</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="78994455"/>
  <con:entry key="customerAgentId" value="21121"/>
  <con:entry key="institutionId" value="45454554"/>
  <con:entry key="customerPreferedLanguage" value="2"/>
  <con:entry key="requesTime" value="1111221125454"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="oldPassword" value="passer"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="newPassword" value="testing"/>
  <con:entry key="sessionId" value="444455445"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>oldPassword</con:entry><con:entry>customerAgentId</con:entry><con:entry>sessionId</con:entry><con:entry>newPassword</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="forgotPassword" path="/forgotPassword" id="f10e8c99-03ac-4fc2-9e8f-c0bda9ca2e84"><con:description>this service allows users to regenerate a new  password</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>pin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>secretQuestionCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>secretQuestionAnswer</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>newPassword</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="forgotPassword" id="59d5bcc2-aefb-4d23-b448-5d74398f5507" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="forgotPasswordRequest" id="b797cabf-0dee-4387-b026-37a5624e102a" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/forgotPassword</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="institutionId" value="111222"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="newPassword" value="newPassword"/>
  <con:entry key="sessionId" value="sessionId"/>
  <con:entry key="secretQuestionCode" value="55555555"/>
  <con:entry key="phoneNumber" value="1133333333"/>
  <con:entry key="pin" value="4454544545"/>
  <con:entry key="requesTime" value="11222222"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="secretQuestionAnswer" value="answer"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>pin</con:entry><con:entry>secretQuestionCode</con:entry><con:entry>secretQuestionAnswer</con:entry><con:entry>sessionId</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>newPassword</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="changeRegisPIN" path="/changeRegisPIN" id="1566fe9e-41d5-47fb-ab1e-885ceda5d30c"><con:description>this service allows users to change the registration PIN used by a user</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>oldPin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>newPin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="changeRegisPIN" id="331157b2-7c7c-4fa6-93e3-012a02deaf10" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="changeRegisPINRequest" id="0807560c-915c-4a41-ada8-1e61b80a78b1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/changeRegisPIN</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="12255668"/>
  <con:entry key="institutionId" value="112333"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="oldPin" value="4545454"/>
  <con:entry key="requesTime" value="12121212112"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="sessionId" value="4544545454"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="newPin" value="778787"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>newPin</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry><con:entry>oldPin</con:entry></con:parameterOrder></con:request></con:method></con:resource><con:resource name="forgotRegisPin" path="/forgotRegisPin" id="0876a1d4-29d1-4086-9e2e-7fa7b6ee7cb8"><con:description>this service allows users to regenerate the registration PIN used by a user</con:description><con:settings/><con:parameters><con:parameter required="true"><con:name>appPlateform</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appVersion</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>appType</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>institutionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>requesTime</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>customerPreferedLanguage</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>phoneNumber</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>cusIden</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>newPin</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>password</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>secretQuestionCode</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>secretQuestionAnswer</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter required="true"><con:name>sessionId</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="forgotRegisPin" id="7135c2a1-0cea-48c5-85fc-78d8045c8f34" method="POST"><con:settings><con:setting id="RecordResponseRepresentations">false</con:setting></con:settings><con:parameters/><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/></con:representation><con:request name="forgotRegisPinRequest" id="d0234045-3afc-49c5-9753-85113c6bff81" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/forgotRegisPin</con:originalUri><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="cusIden" value="11124445"/>
  <con:entry key="institutionId" value="112333333"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="sessionId" value="11332232445"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="newPin" value="newPin"/>
  <con:entry key="secretQuestionCode" value="code"/>
  <con:entry key="password" value="passer"/>
  <con:entry key="phoneNumber" value="11322325"/>
  <con:entry key="requesTime" value="111314545445"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="secretQuestionAnswer" value="answer"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>cusIden</con:entry><con:entry>newPin</con:entry><con:entry>login</con:entry><con:entry>password</con:entry><con:entry>secretQuestionCode</con:entry><con:entry>secretQuestionAnswer</con:entry><con:entry>sessionId</con:entry><con:entry>appType</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:testSuite id="63214f97-ba7c-4c92-8ccf-f99c0555a85e" name="TestSuite"><con:settings/><con:runType>SEQUENTIAL</con:runType><con:testCase id="581533f1-29ed-48ff-b663-347e6f074881" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="TestCase" searchProperties="true"><con:settings/><con:testStep type="restrequest" name="login - loginRequest" id="d329de66-3f45-4c29-8ed0-006b94f701ab"><con:settings/><con:config service="WS" resourcePath="/login" methodName="login" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="login - loginRequest" id="cd09cdfe-6b08-4552-96a2-5a5b8044c141" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">true</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/login</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="055fcfe2-e4df-498d-939f-b365f5303ea4" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6bfe7516-5bf1-45ff-8cb8-3e88cd20cc69" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="ad358ee2-2869-4aa8-95fd-50254850978f" name="JsonPath Count ResponseCode"><con:configuration><path>$.responseCode</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:assertion type="JsonPath Count" id="0c90f425-25bd-423c-acab-d69458b93b15" name="JsonPath Count ResponseTime"><con:configuration><path>$.responseDescription</path><content>1</content><allowWildcards>false</allowWildcards><ignoreNamspaceDifferences>false</ignoreNamspaceDifferences><ignoreComments>false</ignoreComments></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="password" value="passer"/>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="serialNumber" value="4555612121212"/>
  <con:entry key="institutionId" value="4566659"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="19061510241205"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appType</con:entry><con:entry>appVersion</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>login</con:entry><con:entry>password</con:entry><con:entry>serialNumber</con:entry><con:entry>customerPreferedLanguage</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCards - getCardsRequest" id="2d1fa206-cc7b-46a8-8533-284a047cad68"><con:settings/><con:config service="WS" resourcePath="/getCards" methodName="getCards" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCards - getCardsRequest" id="3012ce81-5fa2-46ba-9d5e-ae929920cc8d" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getCards</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="cdd4dc96-79bc-4ddf-8507-3f560434a1d3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="6ea6d364-de8f-49d1-8944-7f15edee747e" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="8855666"/>
  <con:entry key="institutionId" value="45656"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4555555666"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="sessionId" value=""/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getCardTrans - getCardTransRequest" id="3e5df0e4-67ba-42af-ac99-42bf78e1d45e"><con:settings/><con:config service="WS" resourcePath="/getCardTrans" methodName="getCardTrans" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getCardTrans - getCardTransRequest" id="4c50f236-3fca-4e36-9c07-cc12ed099651" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getCardTrans</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="3ae04966-b0da-4b84-bc9e-732be4e1944b" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="085aac24-16ee-41d9-9c2f-c0f846341b9c" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="8456665"/>
  <con:entry key="institutionId" value="45555"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4545454445"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="cardCode" value="455444"/>
  <con:entry key="sessionId" value="4454554"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>cardCode</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateCard - updateCardRequest" id="ba05df19-3489-4c80-9ead-10d77ccef292"><con:settings/><con:config service="WS" resourcePath="/updateCard" methodName="updateCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateCard - updateCardRequest" id="87f981c6-33c2-4584-9628-0b44a7564605" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/updateCard</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="49d477dc-a005-41e2-af48-c6251b1f1635" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="831d3b80-f59f-44ad-9697-3c85ed65adf9" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="institutionId" value="545454"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="cardCode" value="45545445"/>
  <con:entry key="sessionId" value="1"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="phoneNumber" value="8546656566"/>
  <con:entry key="pin" value="454545454"/>
  <con:entry key="requesTime" value="45445454545"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="motifIden" value="45445445"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="motifLabel" value="p45566899"/>
  <con:entry key="operation" value="1"/>
  <con:entry key="motifCode" value="454445"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>sessionId</con:entry><con:entry>operation</con:entry><con:entry>login</con:entry><con:entry>cardCode</con:entry><con:entry>motifCode</con:entry><con:entry>motifIden</con:entry><con:entry>motifLabel</con:entry><con:entry>pin</con:entry><con:entry>phoneNumber</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLocation - getLocationRequest" id="e8e74051-a32e-4eb4-9b13-2f487b4c679d"><con:settings/><con:config service="WS" resourcePath="/getLocation" methodName="getLocation" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLocation - getLocationRequest" id="b84178ac-b7e5-4ebb-a2b8-e879ce8909af" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getLocation</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="55e9dc86-6370-481e-b02c-0a7e8827bd87" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ef076a4a-ea75-4ab9-b754-aa7cf1480af6" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="85555565"/>
  <con:entry key="institutionId" value="45455454"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4545555"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="lon" value="5556656565"/>
  <con:entry key="sessionId" value="4555555"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="lat" value="45556565"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>lat</con:entry><con:entry>lon</con:entry><con:entry>sessionId</con:entry><con:entry>login</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getLoyaltyPoint - getLoyaltyPointRequest" id="d0b517ae-212f-4030-87ce-08d6f0499fef"><con:settings/><con:config service="WS" resourcePath="/getLoyaltyPoint" methodName="getLoyaltyPoint" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getLoyaltyPoint - getLoyaltyPointRequest" id="94ba4065-62b6-4db7-8223-3bb2f13ed6ab" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getLoyaltyPoint</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="30564f8b-da9d-4470-9cd3-9b278cca6562" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="c4d1da98-3a02-442f-a5d4-e8dd8d28825b" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="1222255"/>
  <con:entry key="institutionId" value="12212"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="4545545487"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="cardCode" value="455454"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>cardCode</con:entry><con:entry>login</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="topUpCard - toUpCardRequest" id="31b1aba6-b715-4765-aba9-3cedbb48ab5e"><con:settings/><con:config service="WS" resourcePath="/topUpCard" methodName="topUpCard" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="topUpCard - toUpCardRequest" id="42cf9605-fb91-414c-92de-c18d5241a588" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/topUpCard</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="48b6a719-a19c-4c24-8b72-52eadc915056" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="78666244-0f28-4157-9157-3ecef170bbec" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="qrCodeData" value="5445454"/>
  <con:entry key="phoneNumber" value=""/>
  <con:entry key="institutionId" value="45545454"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="454545445"/>
  <con:entry key="appType" value="1"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="cardCode" value="455454"/>
  <con:entry key="sessionId" value="4445456"/>
  <con:entry key="login" value="hicham"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>cardCode</con:entry><con:entry>login</con:entry><con:entry>qrCodeData</con:entry><con:entry>sessionId</con:entry><con:entry>phoneNumber</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="getMySecretQuestion - getMySecretQuestion" id="c56d2bdc-7d3b-4a48-84dc-955ae5b718bb"><con:settings/><con:config service="WS" resourcePath="/getMySecretQuestion" methodName="getMySecretQuestion" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="getMySecretQuestion - getMySecretQuestion" id="df7e23c9-5301-4ad0-be88-8f846a658568" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/getMySecretQuestion</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="4fbe9f2e-7e13-4a9b-a051-b2f28c1117a1" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="30844d8e-59a3-4238-96e8-24a180d031f3" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="56556565656"/>
  <con:entry key="institutionId" value="44545445"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="444454545454"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>customerPreferedLanguage</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="forgotUserName - forgotUserNameRequest" id="66b48d7c-5a75-46ed-a7fe-176f4c5e1e32"><con:settings/><con:config service="WS" resourcePath="/forgotUserName" methodName="forgotUserName" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="forgotUserName - forgotUserNameRequest" id="e688303f-6d66-4602-a427-41f38555c7bb" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/forgotUserName</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="edb84135-1981-4e87-9ba3-b684094a7bf3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ef3a00ef-f4f0-4ba0-b1f9-e1a62818e618" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="8566446"/>
  <con:entry key="institutionId" value="115566"/>
  <con:entry key="pin" value="4445545445"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="requesTime" value="454554544"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="secretQuestionAnswer" value="answer"/>
  <con:entry key="sessionId" value="1111455555"/>
  <con:entry key="secretQuestionCode" value="question"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>pin</con:entry><con:entry>secretQuestionCode</con:entry><con:entry>secretQuestionAnswer</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="updateCustomerAgent - updateCustomerAgentRequest" id="fc2f71f6-8f2e-457c-a928-8a74bffc1d27"><con:settings/><con:config service="WS" resourcePath="/updateCustomerAgent" methodName="updateCustomerAgent" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="updateCustomerAgent - updateCustomerAgentRequest" id="18097e62-f126-4ca8-a504-d2850f9e1f46" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/updateCustomerAgent</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="ecaacd26-803b-488e-ba98-a2dc156f52eb" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="37e9af82-1d00-49a2-8ab0-f8dc4363814f" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="customerAgentId" value="1111221"/>
  <con:entry key="institutionId" value="456555665"/>
  <con:entry key="customerPreferedLanguage" value="2"/>
  <con:entry key="mail" value="hicham@s2m.ma"/>
  <con:entry key="city" value="city"/>
  <con:entry key="address2" value="address1"/>
  <con:entry key="address1" value="address1"/>
  <con:entry key="sessionId" value="444554544545*"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="photoUrl" value="45454454454445"/>
  <con:entry key="phoneNumber" value="8898454554"/>
  <con:entry key="pin" value="4445545445454"/>
  <con:entry key="requesTime" value="4445545454"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>customerAgentId</con:entry><con:entry>mail</con:entry><con:entry>address1</con:entry><con:entry>city</con:entry><con:entry>address2</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry><con:entry>photoUrl</con:entry><con:entry>pin</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="changePassword - changePasswordRequest" id="1484380e-29b4-4d21-bf22-72558751180d"><con:settings/><con:config service="WS" resourcePath="/changePassword" methodName="changePassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="changePassword - changePasswordRequest" id="e5b6e093-6ff1-44aa-a1b7-c9ac0062ce90" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/changePassword</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="98a10022-ce9d-4596-b5f0-2131ccba4024" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="dbd01190-9299-40c1-8be9-b9d1d037ac17" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="78994455"/>
  <con:entry key="customerAgentId" value="21121"/>
  <con:entry key="institutionId" value="45454554"/>
  <con:entry key="customerPreferedLanguage" value="2"/>
  <con:entry key="requesTime" value="1111221125454"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="oldPassword" value="passer"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="newPassword" value="testing"/>
  <con:entry key="sessionId" value="444455445"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>oldPassword</con:entry><con:entry>newPassword</con:entry><con:entry>customerAgentId</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="forgotPassword - forgotPasswordRequest" id="dd0d205b-caf0-4fe5-a6df-632ccb696790"><con:settings/><con:config service="WS" resourcePath="/forgotPassword" methodName="forgotPassword" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="forgotPassword - forgotPasswordRequest" id="b797cabf-0dee-4387-b026-37a5624e102a" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/forgotPassword</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="08c08e4e-7019-4974-8254-d67128116fb9" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="ae65a237-d0e5-4306-a13e-b7f4767209bd" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="institutionId" value="111222"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="newPassword" value="newPassword"/>
  <con:entry key="sessionId" value="sessionId"/>
  <con:entry key="secretQuestionCode" value="55555555"/>
  <con:entry key="phoneNumber" value="1133333333"/>
  <con:entry key="pin" value="4454544545"/>
  <con:entry key="requesTime" value="11222222"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="secretQuestionAnswer" value="answer"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>phoneNumber</con:entry><con:entry>pin</con:entry><con:entry>secretQuestionCode</con:entry><con:entry>secretQuestionAnswer</con:entry><con:entry>newPassword</con:entry><con:entry>sessionId</con:entry><con:entry>customerPreferedLanguage</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="changeRegisPIN - changeRegisPINRequest" id="e40a6428-aa09-4b68-b961-82f1dee77e64"><con:settings/><con:config service="WS" resourcePath="/changeRegisPIN" methodName="changeRegisPIN" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="changeRegisPIN - changeRegisPINRequest" id="0807560c-915c-4a41-ada8-1e61b80a78b1" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/changeRegisPIN</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="36a3cde9-ee35-42ec-a6de-aa3447c7b4f3" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="cc3c9f0f-ae5d-425d-83a6-9634605ef545" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="phoneNumber" value="12255668"/>
  <con:entry key="institutionId" value="112333"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="oldPin" value="4545454"/>
  <con:entry key="requesTime" value="12121212112"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="sessionId" value="4544545454"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="newPin" value="778787"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>oldPin</con:entry><con:entry>newPin</con:entry><con:entry>login</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:testStep type="restrequest" name="forgotRegisPin - forgotRegisPinRequest" id="59011b6d-dcc0-4aca-9081-8a025636fc05"><con:settings/><con:config service="WS" resourcePath="/forgotRegisPin" methodName="forgotRegisPin" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:restRequest name="forgotRegisPin - forgotRegisPinRequest" id="d0234045-3afc-49c5-9753-85113c6bff81" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting><con:setting id="RecordRequestRepresentations">false</con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/forgotRegisPin</con:originalUri><con:assertion type="Valid HTTP Status Codes" id="c90cc484-9361-46a2-8a9c-fd30fef97b5c" name="Valid HTTP Status Codes"><con:configuration><codes>200</codes></con:configuration></con:assertion><con:assertion type="GroovyScriptAssertion" id="efe34110-cee1-45bd-aa79-3f8ad6963391" name="Script Assertion"><con:configuration><scriptText>def contentType = messageExchange.responseHeaders['Content-Type'][0]
assert contentType == "application/json"</scriptText></con:configuration></con:assertion><con:credentials><con:username xsi:nil="true"/><con:password xsi:nil="true"/><con:domain xsi:nil="true"/><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="appVersion" value="1.0"/>
  <con:entry key="cusIden" value="11124445"/>
  <con:entry key="institutionId" value="112333333"/>
  <con:entry key="customerPreferedLanguage" value="1"/>
  <con:entry key="sessionId" value="11332232445"/>
  <con:entry key="login" value="hicham"/>
  <con:entry key="newPin" value="newPin"/>
  <con:entry key="secretQuestionCode" value="code"/>
  <con:entry key="password" value="passer"/>
  <con:entry key="phoneNumber" value="11322325"/>
  <con:entry key="requesTime" value="111314545445"/>
  <con:entry key="appType" value="C"/>
  <con:entry key="appPlateform" value="ANDROID"/>
  <con:entry key="secretQuestionAnswer" value="answer"/>
</con:parameters><con:parameterOrder><con:entry>appPlateform</con:entry><con:entry>appVersion</con:entry><con:entry>appType</con:entry><con:entry>institutionId</con:entry><con:entry>requesTime</con:entry><con:entry>customerPreferedLanguage</con:entry><con:entry>phoneNumber</con:entry><con:entry>cusIden</con:entry><con:entry>newPin</con:entry><con:entry>login</con:entry><con:entry>password</con:entry><con:entry>secretQuestionCode</con:entry><con:entry>secretQuestionAnswer</con:entry><con:entry>sessionId</con:entry></con:parameterOrder></con:restRequest></con:config></con:testStep><con:properties/></con:testCase><con:properties/></con:testSuite><con:restMockService id="3142e5f5-8dcf-44ff-a5e4-d9499c565893" port="8080" path="/" host="Laptop" name="Mock"><con:description>Zelia  mockup services</con:description><con:settings/><con:properties/><con:restMockAction name="/login" method="POST" resourcePath="/login" id="8eca318a-e6f1-45af-a5b0-c2b233a580b6"><con:settings/><con:defaultResponse>LoginResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="LoginResponse" id="c34d1741-29d7-4e4d-b936-6686078f41fb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script><![CDATA[log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq",responseLogin:new Expando())
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def serialNumber = parameters.serialNumber
		def login = parameters.login
		def password = parameters.password
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		if(parametersLength > 9 || parametersLength < 9 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !serialNumber || !login || !password || !customerPreferedLanguage) {
			createFormatError(response)
		}else {
			if(appVersion == currentVersion && (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				if(login=="hicham" && password =="passer"){
					log.info "approved or completed successfully"
					response.with {
						responseCode = "000"
					     responseDescription = "approved or completed successfully"
					     responseLogin.with {
					     	id = "24801000100500"
					     	type =  "1"
					     }
					}
					if(appType == "C") {
					 response.responseLogin.mcc =  null
					}
					else {
					 response.responseLogin.mcc =  "45666"
					}
					response.with {
						responseLogin.with {
							language = "EN"
							secretQuestion = new Expando(key:"QjOPrv7",value:"Quel est votre animal préféré?")
							addAdr1 = "Street zerktouni"
							addAdr2 = "Maarif 2"
							postalCode = null
							city = "Casablanca"
							countryCode = "MA"
							firstName = "Ahmed"
							lastName = "Ali"
							email = "h.zerouali@gmail.com"
							nationality = "Marocaine"
							defaultAccount = "04801000100500840"
							defaultCurrency = "MAD"
							attempCounter = 0
							deviceStatus = "NEW"
							terminalNumber = null
							pinEntryIndicator = true
							phone = "00249520003699"
							login = login
							tokenLifeTime = "445445577878787"
							photoUrl = "http://172.18.1.212:8082/mobile-web-services/users/11245544"
							institutionCurrencies = []
							institutionCurrencies << new Expando(curCode:"XOF",curDen : "SN", curDecimal : "455656989999")
							institutionCurrencies << new Expando(curCode:"MAD",curDen : "MA", curDecimal : "455666666")
							services = ["service1","service2","service3","service4","service5"]
						}
					}
				}
				else {
					if(login!="hicham") {
						log.info sendError(response,"370","incorrect login")
						fillErrorResponse(response)
					}else if(password!="hicham") {
						log.info sendError(response,"371","incorrect password")
						fillErrorResponse(response)
					}
				}
		          
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	fillErrorResponse(response)
}

def createFormatError(response) {
	log.info sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.with {
		responseLogin.with {
			id = null
     		type =  null
     		mcc =  null
     		language = null
     		secretQuestion = new Expando(key:null,value:null)
     		addAdr1 = null
     		addAdr2 = null
     		postalCode = null
     		city = null
     		countryCode = null
     		firstName = null
     		lastName = null
     		email = null
     		nationality = null
     		defaultAccount = null
     		defaultCurrency = null
     		attempCounter = null
     		deviceStatus = null
     		terminalNumber = null
     		pinEntryIndicator = null
     		phone = null
     		login = null
     		tokenLifeTime = null
     		photoUrl = null
     		institutionCurrencies = null
     		services = null
		}
	}
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)]]></con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseLogin":{"secretQuestion":{"key":null,"value":null},"attempCounter":null,"lastName":null,"terminalNumber":null,"city":null,"postalCode":null,"language":null,"type":null,"mcc":null,"login":null,"deviceStatus":null,"photoUrl":null,"countryCode":null,"defaultCurrency":null,"id":null,"email":null,"addAdr1":null,"addAdr2":null,"institutionCurrencies":null,"tokenLifeTime":null,"defaultAccount":null,"services":null,"firstName":null,"nationality":null,"phone":null,"pinEntryIndicator":null},"responseCode":"307","responseDescription":"format error"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getCards" method="POST" resourcePath="/getCards" id="6cdab086-345f-4845-a6bd-8f6052f14934"><con:settings/><con:defaultResponse>getCardsResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCardsResponse" id="bb250686-1ebb-4aac-bbb7-5a3b005bde33" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script><![CDATA[log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq",cards:[])
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def login = parameters.login
		def sessionId = parameters.sessionId
		if(parametersLength > 9 || parametersLength < 9 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !login || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion && (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				if(login != "hicham" || sessionId != "12345") {
				   log.info sendError(response,101,"service not authorized")
				}
				else if(phoneNumber == "0649809245") {
				    log.info "approved or completed successfully"
				    response.with {
						responseCode = "000"
					     responseDescription = "approved or completed successfully."  
					     def program = new Expando(iden : "iden",domain : "domain",description : "description")
					     program.cards = []
					     program.cards << new Expando(cardCode : "cardCode",truncatedCardnumber : "truncatedCardnumber", name : "name",
					     status : "status", expirydate : "expirydate", renew : "renew", opposed : "opposed")
					     cards << program
					}	
				    
				}else {
				   log.info sendError(response,108,"phoneNumber not exists")
				}
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.with {
		cards : null
	}
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)]]></con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","cards":[],"responseCode":"307","responseDescription":"format error"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getCardTrans" method="POST" resourcePath="/getCardTrans" id="7cf7377a-cac5-44f8-a708-c1c1b13330a0"><con:settings/><con:defaultResponse>getCardTransResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getCardTransResponse" id="7c824d60-bb25-469f-908f-8621ff4eb5a9" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script><![CDATA[log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq",cardTrans:[])
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def cardCode = "455444"
		def login = parameters.login
		def sessionId = parameters.sessionId
		if(parametersLength > 10 || parametersLength < 10 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !cardCode || !login || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion && (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully"
				    response.with {
						responseCode = "000"
					     responseDescription = "approved or completed successfully."  
					     def transaction = new Expando(amount : "5000",sign : "D",label : "transaction 1",transDate : "12465688788")
					     transaction.currency = new Expando(id:"5656654",label : "dirham", iden : "MAD")
					     cardTrans << transaction
					     transaction = new Expando(amount : "25000",sign : "C",label : "transaction 2",transDate : "11165688788")
					     transaction.currency = new Expando(id:"554546654",label : "cfa", iden : "XOF")
					     cardTrans << transaction 
					}	
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.with {
		cards : null
	}
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)]]></con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","cardTrans":[{"amount":"5000","sign":"D","label":"transaction 1","transDate":"12465688788","currency":{"id":"5656654","label":"dirham","iden":"MAD"}},{"amount":"25000","sign":"C","label":"transaction 2","transDate":"11165688788","currency":{"id":"554546654","label":"cfa","iden":"XOF"}}],"responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/updateCard" method="POST" resourcePath="/updateCard" id="30932339-1eef-44a7-9df0-8c561dab2674"><con:settings/><con:defaultResponse>updateCardResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="updateCardResponse" id="8c28d011-e00f-4e96-8309-4c5c584c2d0f" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def operation = parameters.operation
		def login = parameters.login
		def sessionId = parameters.sessionId
		def cardCode = parameters.cardCode
		def motifCode = parameters.motifCode
		def motifIden = parameters.motifIden
		def motifLabel = parameters.motifLabel
		def pin = parameters.pin
		if(parametersLength > 15 || parametersLength &lt; 15 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !login || !sessionId || !operation || !cardCode
			|| !motifCode || !motifIden || !motifLabel || !pin){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				if(login != "hicham" || sessionId != "12345") {
				   log.info sendError(response,101,"service not authorized")
				}else { 
					log.info "approved or completed successfully."  
					response.with {
						responseCode = "000"
				     	responseDescription = "approved or completed successfully."  
					}
				}
					    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getLocation" method="POST" resourcePath="/getLocation" id="f0e8925a-3843-4e57-ab28-7bc51fd03e86"><con:settings/><con:defaultResponse>getLocationResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getLocationResponse" id="82078c59-7efd-4eb0-8384-7e3d57b1e6ca" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script><![CDATA[log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq",locations : [])
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def lat = parameters.lat
		def lon = parameters.lon
		def login = parameters.login
		def sessionId = parameters.sessionId
		if(parametersLength > 11 || parametersLength < 11 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !lat || !lon || !login || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion && (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				if(sessionId != "12345") {
				   log.info sendError(response,101,"service not authorized")
				}else { 
					log.info "approved or completed successfully."  
					response.with {
						responseCode = "000"
				     	responseDescription = "approved or completed successfully."
				     	def location = new Expando(type: "type",longitude: "longitude",latitude: "latitude",agentIden: "agentIden",
	                            agentName: "agentName",agentPhone: "agentPhone",brandIden: "brandIden",brandCorpName: "brandCorpName",
	  					   brandInit: "brandInit",attNum: "attNum",attLabel: "attLabel",posNum: "posNum",posLabel : "posLabel",
	  					   addr1: "addr1",addr2: "addr2",city: "city",cityLabel:"cityLabel",zipCode:"zipCode",distance:"distance")
				          locations << location
					}
				}
					    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.with {
		locations : null
	}
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)]]></con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","locations":[{"type":"type","longitude":"longitude","latitude":"latitude","agentIden":"agentIden","agentName":"agentName","agentPhone":"agentPhone","brandIden":"brandIden","brandCorpName":"brandCorpName","brandInit":"brandInit","attNum":"attNum","attLabel":"attLabel","posNum":"posNum","posLabel":"posLabel","addr1":"addr1","addr2":"addr2","city":"city","cityLabel":"cityLabel","zipCode":"zipCode","distance":"distance"}],"responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getLoyaltyPoint" method="POST" resourcePath="/getLoyaltyPoint" id="d51abf83-2b9f-4965-9e95-ffb9f15b9606"><con:settings/><con:defaultResponse>getLoyaltyPointResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getLoyaltyPointResponse" id="b1a539db-7f47-4546-bf04-95d836b6be84" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def cardCode = parameters.cardCode
		def login = parameters.login
		if(parametersLength > 9 || parametersLength &lt; 9 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !cardCode || !login){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				     loyaltyPoints = 12546666
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.loyaltyPoints = null
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully.","loyaltyPoints":12546666}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/topUpCard" method="POST" resourcePath="/topUpCard" id="7a695fae-21d5-44a8-beb7-e426645c3fa2"><con:settings/><con:defaultResponse>topUpCardResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="topUpCardResponse" id="701c7588-456d-4722-aba8-fd526f1f5357" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def cardCode = parameters.cardCode
		def login = parameters.login
		def qrCodeData = parameters.qrCodeData
		def sessionId = parameters.sessionId
		if(parametersLength > 11 || parametersLength &lt; 11 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !cardCode || !login || !qrCodeData || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/getMySecretQuestion" method="POST" resourcePath="/getMySecretQuestion" id="950d631c-1327-4c31-9fa0-8e50fc65c236"><con:settings/><con:defaultResponse>getMySercretQuestionResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="getMySecretQuestionResponse" id="f38e0da4-3976-4023-8f53-430873cd0da3" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		if(parametersLength > 7 || parametersLength &lt; 7 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully." 
				     mySecretQuestion = new Expando(key: "QjOPrv7",value: "Quel est votre animal préféré?")
   
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.mySecretQuestion = null
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully.","mySecretQuestion":{"key":"QjOPrv7","value":"Quel est votre animal pr\u00e9f\u00e9r\u00e9?"}}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/forgotUserName" method="POST" resourcePath="/forgotUserName" id="e081ab94-722b-4ae0-b2f0-67c1b960f985"><con:settings/><con:defaultResponse>forgotUserNameResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="forgotUserNameResponse" id="902d08de-e5bb-4eea-b0ee-a2fc14bc176b" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def pin = parameters.pin
		def secretQuestionCode = parameters.secretQuestionCode
		def secretQuestionAnswer = parameters.secretQuestionAnswer
		def sessionId = parameters.sessionId
		if(parametersLength > 11 || parametersLength &lt; 11 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !pin || !secretQuestionCode || !secretQuestionAnswer
			|| !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully"
				     login = "hicham"  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
	response.login = null
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully","login":"hicham"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/updateCustomerAgent" method="POST" resourcePath="/updateCustomerAgent" id="eec37e21-f16d-4575-9e3c-359836f011f1"><con:settings/><con:defaultResponse>updateCustomerAgentResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="updateCustomerAgentResponse" id="43440195-7022-42cf-a7ff-96d9bcf5a0b7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def customerAgentId = parameters.customerAgentId
		def mail = parameters.mail
		def address1 = parameters.address1
		def city = parameters.city
		def address2 = parameters.address2
		def login = parameters.login
		def sessionId = parameters.sessionId
		def photoUrl = parameters.photoUrl
		def pin = parameters.pin
		if(parametersLength > 16 || parametersLength &lt; 16 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !customerAgentId || !mail || !address1 || !city
			|| !address2 || !login || !sessionId || !photoUrl || !pin ){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/changePassword" method="POST" resourcePath="/changePassword" id="15c868b1-9e72-4525-b498-6435e82302f5"><con:settings/><con:defaultResponse>changePasswordResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="changePasswordResponse" id="e431e954-f83c-4af3-b4d8-09e0e7321cb7" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def customerAgentId = parameters.customerAgentId
		def oldPassword = parameters.oldPassword
		def newPassword = parameters.newPassword
		def sessionId = parameters.sessionId
		if(parametersLength > 11 || parametersLength &lt; 11 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !customerAgentId || !oldPassword 
			|| !newPassword || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/forgotPassword" method="POST" resourcePath="/forgotPassword" id="d28ff944-65af-43c0-bcda-47263a3361f2"><con:settings/><con:defaultResponse>forgotPasswordResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="forgotPasswordResponse" id="25abe19f-787a-4ae2-a2a2-d4f10603e50e" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def pin = parameters.pin
		def secretQuestionCode = parameters.secretQuestionCode
		def secretQuestionAnswer = parameters.secretQuestionAnswer
		def newPassword = parameters.newPassword
		def sessionId = parameters.sessionId
		if(parametersLength > 12 || parametersLength &lt; 12 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !pin || !secretQuestionCode 
			|| !secretQuestionAnswer || !newPassword || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"307","responseDescription":"format error"}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/changeRegisPIN" method="POST" resourcePath="/changeRegisPIN" id="3152972a-6f08-4a69-b09f-c809011e0028"><con:settings/><con:defaultResponse>changeRegisPINResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="changeRegisPINResponse" id="407832c8-371d-4fe8-a230-5777621af6ad" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def oldPin = parameters.oldPin
		def newPin = parameters.newPin
		def login = parameters.login
		def sessionId = parameters.sessionId
		if(parametersLength > 11 || parametersLength &lt; 11 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !oldPin || !newPin 
			|| !login || !sessionId){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction><con:restMockAction name="/forgotRegisPIN" method="POST" resourcePath="/forgotRegisPin" id="fb6390aa-8454-4d1c-a3bb-9d5d9da10451"><con:settings/><con:defaultResponse>forgotRegisPINResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="forgotRegisPINResponse" id="7330caf4-f150-42c8-ab53-7d851c16e267" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def response = new Expando(responseTime:"190615101430630",responseReference:"HYyLxUnVhY4Ae3Lq")
def currentVersion = "1.0"
try {
	def contentType = mockRequest.request.contentType
	if(contentType == "application/x-www-form-urlencoded") {
		def parameters = [:]
		def pairs = mockRequest.requestContent.split("\\&amp;");
		def parametersLength = pairs.length 
		0.upto(parametersLength-1,{
			def fields = pairs[it].split("=");
	   		def name = URLDecoder.decode(fields[0], "UTF-8");
	   		parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
		})
		parameters.each { log.info " request Parameter { $it.key : $it.value } " }
		def appPlateform = parameters.appPlateform
		def appVersion = parameters.appVersion
		def appType = parameters.appType
		def institutionId = parameters.institutionId
		def requesTime = parameters.requesTime
		def customerPreferedLanguage = parameters.customerPreferedLanguage
		def phoneNumber = parameters.phoneNumber
		def cusIden = parameters.cusIden
		def password = parameters.password
		def newPin = parameters.newPin
		def login = parameters.login
		def sessionId = parameters.sessionId
		def secretQuestionCode = parameters.secretQuestionCode
		def secretQuestionAnswer = parameters.secretQuestionAnswer
		if(parametersLength > 14 || parametersLength &lt; 14 || !appPlateform || !appVersion || !appType || !institutionId 
			|| !requesTime || !customerPreferedLanguage || !phoneNumber || !cusIden || !password || !newPin 
			|| !login || !sessionId || !secretQuestionCode || !secretQuestionAnswer){
			createFormatError(response)
		}else {
			if(appVersion == currentVersion &amp;&amp; (appPlateform == "ANDROID" || appPlateform == "IOS") ) {
				log.info "approved or completed successfully."  
				response.with {
					responseCode = "000"
				     responseDescription = "approved or completed successfully."  
				}    
			}
			else {
				log.info sendError(response,"384","version not supported")
				fillErrorResponse(response)
			}
		}
	
	}else {
		createFormatError(response)
	}
}catch(e) {
	log.info sendError(response,"196","system malfunction")
	log.info e.message
	fillErrorResponse(response)
}

def createFormatError(response) {
	sendError(response,"307","format error")
	fillErrorResponse(response)
}

def sendError(response,code,description) {
	response.with {
		responseCode = code
		responseDescription = description
	}
	fillErrorResponse(response)
	return description
}

def fillErrorResponse(response) {
}
return mockResponse.responseContent = groovy.json.JsonOutput.toJson(response)</con:script><con:responseContent>{"responseTime":"190615101430630","responseReference":"HYyLxUnVhY4Ae3Lq","responseCode":"000","responseDescription":"approved or completed successfully."}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties/><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>