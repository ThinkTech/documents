<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="1f6284a4-9672-4e34-a46d-db901cadaa7b" activeEnvironment="Default" name="Zelia" soapui-version="5.5.0" abortOnError="false" runType="SEQUENTIAL" resourceRoot="" xmlns:con="http://eviware.com/soapui/config"><con:settings/><con:interface xsi:type="con:RestService" id="1fd6e3dc-f0e9-4ac7-b5d1-440ba3df5785" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://localhost:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><con:settings/><con:definitionCache type="TEXT" rootPart=""/><con:endpoints><con:endpoint>http://localhost:8080</con:endpoint></con:endpoints><con:resource name="login" path="/login" id="82a9e0f8-8f27-4cb8-b557-23bb11cec16e"><con:settings/><con:parameters><con:parameter><con:name>login</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter><con:parameter><con:name>password</con:name><con:value/><con:style>QUERY</con:style><con:default/><con:description xsi:nil="true"/></con:parameter></con:parameters><con:method name="Login" id="ed6f244c-5114-471a-b43c-5f177220073e" method="POST"><con:settings/><con:parameters/><con:representation type="RESPONSE"><con:mediaType>application/json</con:mediaType><con:status>200</con:status><con:params/><con:element xmlns:log="http://localhost/login">log:Response</con:element></con:representation><con:representation type="REQUEST"><con:mediaType>application/x-www-form-urlencoded</con:mediaType><con:params/></con:representation><con:representation type="FAULT"><con:mediaType xsi:nil="true"/><con:status>500</con:status><con:params/><con:element>data</con:element></con:representation><con:request name="LoginRequest" id="077a6cc9-2b92-48a4-a93c-ddfee309196e" mediaType="application/x-www-form-urlencoded" postQueryString="true"><con:settings><con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting></con:settings><con:endpoint>http://localhost:8080</con:endpoint><con:request/><con:originalUri>http://localhost/login</con:originalUri><con:credentials><con:authType>No Authorization</con:authType></con:credentials><con:jmsConfig JMSDeliveryMode="PERSISTENT"/><con:jmsPropertyConfig/><con:parameters>
  <con:entry key="password" value="passer"/>
  <con:entry key="login" value="hichame"/>
</con:parameters><con:parameterOrder><con:entry>login</con:entry><con:entry>password</con:entry></con:parameterOrder></con:request></con:method></con:resource></con:interface><con:restMockService id="3142e5f5-8dcf-44ff-a5e4-d9499c565893" port="8080" path="/" host="Laptop" name="ZeliaMockService"><con:settings/><con:properties/><con:restMockAction name="/login" method="POST" resourcePath="/login" id="8eca318a-e6f1-45af-a5b0-c2b233a580b6"><con:settings/><con:defaultResponse>LoginResponse</con:defaultResponse><con:dispatchStyle>SEQUENCE</con:dispatchStyle><con:dispatchPath>/*
// Script dispatcher is used to select a response based on the incoming request.
// Here are few examples showing how to match based on path, query param, header and body

// Match based on path
def requestPath = mockRequest.getPath()
log.info "Path: "+ requestPath

if( requestPath.contains("json") )
{
    // return the name of the response you want to dispatch
    return "JSON Response"
}


// Match based on query parameter
def queryString = mockRequest.getRequest().getQueryString()
log.info "QueryString: " + queryString

if( queryString.contains("stockholm") )
{
    // return the name of the response you want to dispatch
    return "Response Stockholm"
}
else if( queryString.contains("london") )
{
    // return the name of the response you want to dispatch
    return "Response London"
}


// Match based on header
def acceptEncodingHeaderList = mockRequest.getRequestHeaders().get("Accept-Encoding")
log.info "AcceptEncoding Header List: " + acceptEncodingHeaderList

if( acceptEncodingHeaderList.contains("gzip,deflate") )
{
    // return the name of the response you want to dispatch
    return "GZiped Response"
}


// Match based on body
def requestBody = mockRequest.getRequestContent()
log.info "Request body: " + requestBody

if( requestBody.contains("some data") )
{
    // return the name of the response you want to dispatch
    return "Response N"
}
*/
</con:dispatchPath><con:response name="LoginResponse" id="c34d1741-29d7-4e4d-b936-6686078f41fb" httpResponseStatus="200" mediaType="application/json"><con:settings/><con:script>log.info " request path "+ mockRequest.path
log.info " request method "+mockRequest.method
log.info " request content-type "+mockRequest.request.contentType
log.info " request content "+mockRequest.requestContent
def parameters = [:]
def pairs = mockRequest.requestContent.split("\\&amp;");
for (int i = 0; i &lt; pairs.length; i++) {
   String[] fields = pairs[i].split("=");
   String name = URLDecoder.decode(fields[0], "UTF-8");
   parameters[name] = URLDecoder.decode(fields[1], "UTF-8");
}
parameters.each { log.info " request Parameter { $it.key : $it.value } " }
def login = parameters['login']
def password = parameters['password']
if(login=="hicham" &amp;&amp; password =="passer"){
	log.info "login successful"
	context.setProperty("responseCode", "000")
	context.setProperty("responseDescription","Opération réussie")
}
else {
	log.info "login error"
	context.setProperty("responseCode", "307")
	context.setProperty("responseDescription","Login ou mot de passe incorrect.")
}
context.setProperty( "responseTime", 190615101430630 )
context.setProperty("responseReference","HYyLxUnVhY4Ae3Lq")
//mockResponse.responseContent = groovy.json.JsonOutput.toJson([status : 1])
return mockResponse.responseContent</con:script><con:responseContent>{
    "responseCode": "${responseCode}",
    "responseDescription": "${responseDescription}",
    "responseTime": "190615092948436",
    "responseReference": "ZcFbhKp7HOVHRjgv",
    "responseLogin": {
        "id": "04801000100500",
        "type": "1",
        "language": "EN",
        "secretQuestion": {
            "key": "QjOPrv7",
            "value": "Quel est votre animal préféré?"
        },
        "addAdr1": "Street zerktouni",
        "addAdr2": "Maarif 2",
        "postalCode": null,
        "city": "Casablanca",
        "firstName": "Ahmed",
        "lastName": "Ali",
        "email": "h.zerouali@gmail.com",
        "nationality": "736",
        "defaultAccount": "04801000100500840",
        "defaultCurrency": "SDG",
        "attempCounter": 0,
        "deviceStatus": "NEW",
        "terminalNumber": null,
        "pinEntryIndicator": true,
        "phone": "00249520003699",
        "login": "hicham",
        "photoUrl": "http://172.18.1.212:8082/mobile-web-services/subscription/getDocument?appVersion",
        "tokenLifetime": 6000,
         "institutionCurrencies": {
            "curCode": "IAYY5",
            "curlden": "BPD",
            "curlDemical": "545544"
        }
    }
}</con:responseContent></con:response></con:restMockAction></con:restMockService><con:properties><con:property><con:name>test</con:name><con:value>190615101430630</con:value></con:property></con:properties><con:wssContainer/><con:oAuth2ProfileContainer/><con:oAuth1ProfileContainer/><con:sensitiveInformation/></con:soapui-project>